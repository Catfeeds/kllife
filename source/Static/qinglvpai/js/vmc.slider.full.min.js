(function(d, l) {
    var h = {
        fade: function() {
            var a = this,
                c = a.options;
            a.node.item.eq(a.index).css({
                display: "none",
                zIndex: 2
            }).fadeIn(c.speed, function() {
                a._afterTransfer()
            })
        }
    };
    d.fn.vmcSlider = function(a) {
        var c = "string" === d.type(a),
            b = [].slice.call(arguments, 1);
        if (this.length) return this.each(function() {
            var g = d(this),
                e = g.data("vomoc");
            c && "_" !== a.charAt(0) && e ? f.prototype[a] && f.prototype[a].apply(e, b) : c || e || (e = new f(g, a), e._init(), g.data("vomoc", e))
        })
    };
    d.vmcSliderEffects = function(a, c) {
        d.isPlainObject(a) ? h = d.extend({}, h, a) : h[a] = c
    };
    var f = function(a, c) {
        this.options = d.extend({}, this.options, c);
        this.node = {
            elem: a
        };
        this.effectIndex = this.index = 0;
        this.animateStatus = !1
    };
    f.prototype.options = {
        width: 1E3,
        height: 330,
        gridCol: 10,
        gridRow: 5,
        gridVertical: 20,
        gridHorizontal: 10,
        autoPlay: !0,
        ascending: !0,
        effects: ["fade"],
        ie6Tidy: !1,
        random: !1,
        duration: 4E3,
        speed: 900
    };
    f.prototype._init = function() {
        var a = this,
            c = a.node,
            b = a.options;
        a._create();
        a._setSize();
        a._bind();
        c.item.eq(a.index).show();
        c.button.eq(a.index).addClass("vui-button-cur");
        if (!0 === b.autoPlay) d(window).on("load", function() {
            a.time = setTimeout(function() {
                !0 === b.ascending ? a._next() : a._prev()
            }, b.duration)
        })
    };
    f.prototype._create = function() {
        var a = this.node,
            c = this.options,
            b, g;
        a.mimic = d('<div class="vui-slider"></div>');
        a.items = d('<div class="vui-items"></div>').appendTo(a.mimic);
        a.buttons = d('<div class="vui-buttons"></div>').appendTo(a.mimic);
        a.prev = d('<div class="vui-prev"></div>').appendTo(a.mimic);
        a.next = d('<div class="vui-next"></div>').appendTo(a.mimic);
        a.transfer = d('<div class="vui-transfer"></div>').appendTo(a.mimic);
        a.elem.children().each(function() {
            d('<div class="vui-item"></div>').append(d(this)).appendTo(a.items);
            d('<div class="vui-button"></div>').appendTo(a.buttons)
        });
        a.item = a.items.children();
        a.button = a.buttons.children();
        a.elem.replaceWith(a.mimic);
        this.stageHtml = ["", "", ""];
        b = c.width / c.gridCol;
        g = c.height / c.gridRow;
        for (var e = 0; e < c.gridCol * c.gridRow; e++) {
            var f = g * Math.floor(e / c.gridCol),
                k = e % c.gridCol * b;
            this.stageHtml[0] += '<div style="position:absolute;top:' + f + "px;left:" + k + "px;";
            this.stageHtml[0] += "width:" + b + "px;height:" + g + "px;background-position:-" + k + "px -" + f + 'px;"></div>'
        }
        g = c.height / c.gridHorizontal;
        for (e = 0; e < c.gridHorizontal; e++) this.stageHtml[1] += '<div style="position:absolute;top:' + g * e + "px;left:0;", this.stageHtml[1] += "width:" + c.width + "px;height:" + g + "px;background-position:0 -" + g * e + 'px;"></div>';
        b = c.width / c.gridVertical;
        for (e = 0; e < c.gridVertical; e++) this.stageHtml[2] += '<div style="position:absolute;top:0;left:' + b * e + "px;", this.stageHtml[2] += "width:" + b + "px;height:" + c.height + "px;background-position:-" + b * e + 'px 0;"></div>'
    };
    f.prototype._setSize = function() {
        var a = this.node,
            c = this.options;
        a.mimic.width(c.width).height(c.height);
        a.buttons.css({
            left: (c.width - a.buttons.width()) / 2
        })
    };
    f.prototype._bind = function() {
        var a = this,
            c = a.node;
        c.button.on("click", function() {
            !1 === a.animateStatus && (clearTimeout(a.time), a.index = d(this).index(), a._play())
        });
        c.prev.add(c.next).hover(function() {
            d(this).addClass("vui-sidebutton-hover")
        }, function() {
            d(this).removeClass("vui-sidebutton-hover")
        }).on("click", function() {
            !1 === a.animateStatus && (clearTimeout(a.time), d(this).hasClass("vui-next") ? a._next() : a._prev())
        })
    };
    f.prototype._play = function() {
        var a = this.node,
            c = this.options;
        a.button.eq(this.index).addClass("vui-button-cur").siblings().removeClass("vui-button-cur");
        c.effects.length ? (this.animateStatus = !0, a.transfer.children().stop(!0), h[this._getEffect()].call(this)) : this._afterTransfer()
    };
    f.prototype._afterTransfer = function() {
        var a = this,
            c = a.node,
            b = a.options;
        c.transfer.hide();
        c.item.css("zIndex", 1).eq(a.index).show().siblings().hide();
        a.animateStatus = !1;
        !0 === b.autoPlay && (a.time = setTimeout(function() {
            !0 === b.ascending ? a._next() : a._prev()
        }, b.duration))
    };
    f.prototype._setStage = function(a) {
        var c = this.node;
        this.url = c.item.eq(this.index).find("img")[0].src;
        c.transfer.html(this.stageHtml[a]).show().children().css({
            backgroundImage: "url(" + this.url + ")"
        })
    };
    f.prototype._prev = function() {
        var a = this.node;
        this.index--;
        0 > this.index && (this.index = a.item.length - 1);
        this._play()
    };
    f.prototype._next = function() {
        var a = this.node;
        this.index++;
        this.index >= a.item.length && (this.index = 0);
        this._play()
    };
    f.prototype._getEffect = function() {
        var a = this.options,
            c;
        !0 === a.random ? c = Math.floor(a.effects.length * Math.random()) : (c = this.effectIndex, this.effectIndex++, this.effectIndex >= a.effects.length && (this.effectIndex = 0));
        return a.effects[c]
    };
    d.vmcSliderEffects({
        fadeTopLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(0);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = ((Math.floor(a / b.gridCol) + 1) / b.gridRow + (a % b.gridCol + 1) / b.gridCol) / 2;
                a *= b.speed / 3 * 2;
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        fadeBottomRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(0);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = 1 - (Math.floor(a / b.gridCol) / b.gridRow + a % b.gridCol / b.gridCol) / 2;
                a *= b.speed / 3 * 2;
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        fadeLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (a + 1);
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        fadeRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (b.gridVertical - a);
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        fadeTop: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(1);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridHorizontal * (a + 1);
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        fadeBottom: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(1);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridHorizontal * (b.gridHorizontal - a);
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        blindsTopLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(0);
            c.transfer.children().css({
                width: 0,
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = ((Math.floor(a / b.gridCol) + 1) / b.gridRow + (a % b.gridCol + 1) / b.gridCol) / 2;
                a *= b.speed / 3 * 2;
                d(this).delay(a).animate({
                    width: b.width / b.gridCol,
                    height: b.height / b.gridRow,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        blindsBottomRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(0);
            c.transfer.children().css({
                width: 0,
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = 1 - (Math.floor(a / b.gridCol) / b.gridRow + a % b.gridCol / b.gridCol) / 2;
                a *= b.speed / 3 * 2;
                d(this).delay(a).animate({
                    width: b.width / b.gridCol,
                    height: b.height / b.gridRow,
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        blindsLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                width: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (a + 1);
                d(this).delay(a).animate({
                    width: b.width / b.gridVertical,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        blindsRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                width: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (b.gridVertical - a);
                d(this).delay(a).animate({
                    width: b.width / b.gridVertical,
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        blindsTop: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(1);
            c.transfer.children().css({
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridHorizontal * (a + 1);
                d(this).delay(a).animate({
                    height: b.height / b.gridHorizontal,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        blindsBottom: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(1);
            c.transfer.children().css({
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridHorizontal * (b.gridHorizontal - a);
                d(this).delay(a).animate({
                    height: b.height / b.gridHorizontal,
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        mosaic: function() {
            var a = this,
                c = a.node,
                b = a.options,
                g = 0,
                e = 0;
            a._setStage(0);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                a = b.speed / 2 * Math.random();
                a > g && (g = a, e = d(this).index());
                d(this).delay(a).animate({
                    opacity: 1
                }, b.speed / 2, "linear")
            }).eq(e).queue(function() {
                a._afterTransfer()
            })
        },
        bomb: function() {
            var a = this,
                c = a.node,
                b = a.options,
                g = 0,
                e = 0,
                f = b.width / b.gridCol,
                k = b.height / b.gridRow;
            a._setStage(0);
            c.transfer.children().css({
                top: (b.height - k) / 2,
                left: (b.width - f) / 2,
                opacity: 0
            }).each(function(a) {
                var c = k * Math.floor(a / b.gridCol);
                a = a % b.gridCol * f;
                var h = b.speed / 2 * Math.random();
                h > g && (g = h, e = d(this).index());
                d(this).delay(h).animate({
                    top: c,
                    left: a,
                    opacity: 1
                }, b.speed / 2)
            }).eq(e).queue(function() {
                a._afterTransfer()
            })
        },
        fumes: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(0);
            c.transfer.children().css({
                width: b.width / b.gridCol * 2,
                height: b.height / b.gridRow * 2,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / c.transfer.children().length * (a + 1);
                d(this).delay(a).animate({
                    width: b.width / b.gridCol,
                    height: b.height / b.gridRow,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        interlaceLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                var c = b.speed / 3 * 2 / b.gridVertical * (a + 1);
                d(this).css({
                    top: 0 < a % 2 ? -b.height : b.height
                }).delay(c).animate({
                    top: 0,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        interlaceRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                opacity: 0
            }).each(function(a) {
                var c = b.speed / 3 * 2 / b.gridVertical * (b.gridVertical - a);
                d(this).css({
                    top: 0 < a % 2 ? -b.height : b.height
                }).delay(c).animate({
                    top: 0,
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        },
        curtainLeft: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (a + 1);
                d(this).delay(a).animate({
                    top: 0,
                    height: b.height,
                    opacity: 1
                }, b.speed / 3)
            }).last().queue(function() {
                a._afterTransfer()
            })
        },
        curtainRight: function() {
            var a = this,
                c = a.node,
                b = a.options;
            a._setStage(2);
            c.transfer.children().css({
                height: 0,
                opacity: 0
            }).each(function(a) {
                a = b.speed / 3 * 2 / b.gridVertical * (b.gridVertical - a);
                d(this).delay(a).animate({
                    top: 0,
                    height: b.height,
                    opacity: 1
                }, b.speed / 3)
            }).first().queue(function() {
                a._afterTransfer()
            })
        }
    })
})(jQuery);